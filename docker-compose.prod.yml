# Production Docker Compose Override
# Use with: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
# Optimized for VPS with 4GB RAM and 2 CPUs

version: '3.8'

services:
  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: autodropshipper_nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - static_volume:/usr/share/nginx/html/static:ro
      - ./nginx/certs:/etc/nginx/certs:ro
      - ./nginx/logs:/var/log/nginx
    ports:
      - "80:80"      # HTTP (will redirect to HTTPS)
      - "443:443"    # HTTPS main access
      # Port 8838 not exposed but available if needed
    depends_on:
      - webapp-prod
    restart: always
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Django Web Application (Production)
  webapp-prod:
    extends:
      file: docker-compose.yml
      service: webapp-prod
    container_name: autodropshipper_webapp
    env_file:
      - .env
    volumes:
      - ./logs/django:/var/log/django
      - static_volume:/app/webapp/staticfiles
    expose:
      - "8000"  # Internal port only, not exposed externally
    ports: []   # Remove any direct port exposure
    networks:
      - app-network
    environment:
      - DJANGO_SETTINGS_MODULE=webapp.settings_prod
      - GUNICORN_WORKERS=3  # 2 CPUs Ã— 1 + 1
      - GUNICORN_MAX_REQUESTS=1000
      - GUNICORN_MAX_REQUESTS_JITTER=50
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.75'
        reservations:
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # PostgreSQL Database
  db:
    extends:
      file: docker-compose.yml
      service: db
    container_name: autodropshipper_db
    env_file:
      - .env
    networks:
      - app-network
    ports: []  # Remove external port exposure
    expose:
      - "5432"  # Internal only
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Production Scraper Service (runs periodically, not always on)
  production:
    extends:
      file: docker-compose.yml
      service: production
    container_name: autodropshipper_scraper
    env_file:
      - .env
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 1.5G  # Chrome needs more memory
          cpus: '1.5'
        reservations:
          memory: 1G
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "5"
    # Scraper runs on schedule, not as a persistent service
    restart: "no"

# Network Configuration
networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  postgres_data:
    driver: local
  static_volume:
    driver: local