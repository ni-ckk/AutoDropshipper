[project]
name = "autodropshipper-scrapers"
version = "0.5.0"
description = "AutoDropshipper scraping services with browser automation"
requires-python = ">=3.10"
dependencies = [
    # Scraping and automation
    "seleniumbase>=4.40.6",
    "selenium>=4.34.2", 
    "beautifulsoup4>=4.13.4",
    "requests>=2.32.4",
    
    # Data validation and settings
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    
    # Database (PostgreSQL client)
    "psycopg2-binary>=2.9.10",
    
    # Utilities and logging
    "structlog>=24.0.0",
    "python-dotenv>=1.1.1",
    "colorama>=0.4.6",
    "rich>=13.0.0",
    
    # Testing dependencies
    "pytest>=8.4.1",
    "pytest-html>=4.0.2", 
    "pytest-metadata>=3.1.1",
    "pytest-ordering>=0.6",
    "pytest-rerunfailures>=15.1",
    "pytest-xdist>=3.8.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.ruff]
line-length = 100
target-version = "py310"
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "venv", 
    "build",
    "dist",
    "downloaded_files",
    "temp",
]

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "N",    # pep8-naming
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
    "B904",  # raise without from inside except
]

[tool.ruff.lint.isort]
known-third-party = ["seleniumbase", "pydantic", "structlog"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_reexport = true
disallow_untyped_defs = true

[[tool.mypy.overrides]]
module = [
    "seleniumbase.*",
    "selenium.*", 
    "bs4.*",
    "requests.*",
    "structlog.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
testpaths = ["src"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config", 
    "--cov=src",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-fail-under=80",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/temp/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError", 
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]